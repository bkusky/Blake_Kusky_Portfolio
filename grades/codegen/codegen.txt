=====STUDENT TESTS=====
====Good Tests====
===[good10.bminor Input]===
// boolean print

b: boolean = true;

main: function integer () = {
    b1: boolean = false;

    print b, " is true and ", b1, " is false\n";
    return 0;
}
===[good10.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
true is true and false is false

Expected return code:
0
Actual output:
true is true and false is false

Actual return code:
0
Test Passed!
===[good11.bminor Input]===
// calling a function

func: function integer () = {
    return 1 + 1;
}

main: function integer () = {
    x: integer = func() + 1;
    print x, '\n';

    return func() - 2;
}
===[good11.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
3

Expected return code:
0
Actual output:
3

Actual return code:
0
Test Passed!
===[good12.bminor Input]===
// exponents

main: function integer () = {
    answer: integer;

    answer = 5^2;
    print answer, '\n';

    return 0;
}
===[good12.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
25

Expected return code:
0
Actual output:
25

Actual return code:
0
Test Passed!
===[good13.bminor Input]===
// post add and sub

main: function integer () = {
    value: integer = 5;

    old_value: integer = value++;
    print "----adding----\n";

    print "old --> ", old_value, "\n";
    print "current --> ", value, "\n";

    print "---subtracting----\n";
    
    old_value = value--;
    
    print "old --> ", old_value, "\n";
    print "current --> ", value, "\n";

    return 0;
}
===[good13.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
----adding----
old --> 5
current --> 6
---subtracting----
old --> 6
current --> 5

Expected return code:
0
Actual output:
----adding----
old --> 5
current --> 6
---subtracting----
old --> 6
current --> 5

Actual return code:
0
Test Passed!
===[good14.bminor Input]===
// negate

main: function integer () = {
    x: integer = 1;
    x = -x;

    print x, '\n';
    return 0;
}
===[good14.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
-1

Expected return code:
0
Actual output:
-1

Actual return code:
0
Test Passed!
===[good15.bminor Input]===
// if

main: function integer () = {
    
    a: integer = 10;
    b: integer = 9;

    if (a > b) {
        print "a < b\n";
    } else {
        print "nooo!\n";
    }

    return 0;
}
===[good15.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
a < b

Expected return code:
0
Actual output:
a < b

Actual return code:
0
Test Passed!
===[good16.bminor Input]===
// if else

main: function integer () = {
    a: integer = 20;
    b: integer = 10;

    if (a < b) {
        print "NOOO!\n";
    } else if (a == b) {
        print "NOOO!\n";
    } else if (a <= b) {
        print "NOOO!\n";
    } else {
        print "yes\n";
    }

    return 0;
}
===[good16.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
yes

Expected return code:
0
Actual output:
yes

Actual return code:
0
Test Passed!
===[good17.bminor Input]===
// for loop

main: function integer () = {
    i: integer = 0;

    for (i = 0; i < 100; i++) {
        print i, '\n';
    }

    return 0;
}
===[good17.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99

Expected return code:
0
Actual output:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99

Actual return code:
0
Test Passed!
===[good18.bminor Input]===
// if cont.

main: function integer () = {
    t: char = 'y';
    f: char = 'y';

    if (f == t) {
        print t, " and ", f, " are equal\n";
    } else {
        print "they are not equal\n"; 
    }

    return 0;
}
===[good18.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
y and y are equal

Expected return code:
0
Actual output:
y and y are equal

Actual return code:
0
Test Passed!
===[good19.bminor Input]===
// loops cont.

main: function integer () = {
    i: integer = 0;

    for (;i<10;i++) {
        print i, '\n';
    }

    for (i=0;;i++) {
        if (i == 10) {
            return 0;
        }
    }
}
===[good19.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
0
1
2
3
4
5
6
7
8
9

Expected return code:
0
Actual output:
0
1
2
3
4
5
6
7
8
9

Actual return code:
0
Test Passed!
===[good1.bminor Input]===
// basic working program

main: function integer () = {
	return 0;
}

===[good1.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
0
Actual output:

Actual return code:
0
Test Passed!
===[good20.bminor Input]===
// fizzbuzz

main: function integer () = {
    i: integer = 0;

    for (i = 0; i <= 100; i++) {
        if (i % 5 == 0) {
            if (i % 3 == 0) {
                print "FizzBuzz\n";
            } else {
                print "Buzz\n";
            }
        } else if (i % 3 == 0) {
            print "Fizz\n";
        } else {
            print i, '\n';
        }

    }

    return 0;
}
===[good20.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
FizzBuzz
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz

Expected return code:
0
Actual output:
FizzBuzz
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz

Actual return code:
0
Test Passed!
===[good2.bminor Input]===
main: function integer () = {
	print "Hello World!\n";
	return 0;
}

===[good2.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
Hello World!

Expected return code:
0
Actual output:
Hello World!

Actual return code:
0
Test Passed!
===[good3.bminor Input]===
// subtraction

main: function integer () = {
    i: integer = 1;
    j: integer = 10;
    z: integer = j - i;

    print z, "\n";

    return 0;
}
===[good3.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
9

Expected return code:
0
Actual output:
9

Actual return code:
0
Test Passed!
===[good4.bminor Input]===
// multiplication

x: integer = 10;

main: function integer () = {
    y: integer = x * 11;
   
    print y, "\n";

    return 0;
}
===[good4.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
110

Expected return code:
0
Actual output:
110

Actual return code:
0
Test Passed!
===[good5.bminor Input]===
// division

main: function integer () = {
    t: integer = 2;
    i: integer = 16 / t;

    print i, "\n";
    return 0;
}
===[good5.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
8

Expected return code:
0
Actual output:
8

Actual return code:
0
Test Passed!
===[good6.bminor Input]===
// expressions

main: function integer () = {
    x: integer = 5;
    y: integer = (x + 5) * 10 - 50;
    z: integer = y + 19;
    a: integer = (z * 1000 + y * 8) + (x * 4);
    
    print a, "\n";
    return 0;
}
===[good6.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
69420

Expected return code:
0
Actual output:
69420

Actual return code:
0
Test Passed!
===[good7.bminor Input]===
// printing integers

i: integer = 0;

main: function integer () = {
    j: integer = 1;

    print i, j, "\n";
    return 0;
}
===[good7.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
01

Expected return code:
0
Actual output:
01

Actual return code:
0
Test Passed!
===[good8.bminor Input]===

c1: char = 'H';

main: function integer () = {
    c2: char = 'i';

    print c1, c2, ' ', '\n';
    return 0;
}
===[good8.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
Hi 

Expected return code:
0
Actual output:
Hi 

Actual return code:
0
Test Passed!
===[good9.bminor Input]===
// printing strings

str: string = "this is a string. ";

main: function integer () = {
    str2: string = "this is also a string.\n";

    print str, str2;
    return 0;
}
===[good9.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
this is a string. this is also a string.

Expected return code:
0
Actual output:
this is a string. this is also a string.

Actual return code:
0
Test Passed!
=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
strlen: function integer(s: string);
f: function integer(i: integer);

main: function integer () = {
	if (f(strlen("hi")) > strlen("there")) {print "no\n";}
	if (f(f(strlen("hi"))) > strlen("there")) print "ok\n";

	return 0;
}

f: function integer(i: integer) = {
	return i*2;
}

===[good1.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
ok

Expected return code:
0
Actual output:
ok

Actual return code:
0
Test Passed!
===[good11.bminor Input]===
main: function integer () = {
	x: integer = 20;
	y: integer = x;
	{
		x: integer = 10;
		y = y + x;
	}

	{
		{
			y = y + x;
			x: integer = 2;
			y = y + x;
		}
		y = y + x;
		x: integer = 3;
		y = y + x;
	}
	return y + x;
}

===[good11.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
95
Actual output:

Actual return code:
95
Test Passed!
===[good12.bminor Input]===
main: function integer () = {
	return 4 + 9 / (-2 - (-5)) + (((2 + 1) * 4) - 1) % 3 * 7 - 2^3;
}

===[good12.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
13
Actual output:

Actual return code:
13
Test Passed!
===[good13.bminor Input]===
foo_epilogue: function integer () = {
	return 2;
}

foo: function integer ();

main: function integer () = {
	return foo() * 11;
}

main_epilogue: function integer () = {
	return foo_epilogue() + 3;
}

foo: function integer () = {
	return main_epilogue() - 1;
}

===[good13.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
44
Actual output:

Actual return code:
44
Test Passed!
===[good14.bminor Input]===
// https://piazza.com/class/jziupd2lzpm7cy?cid=185

s: string = "no\n";

f: function string() = {
	t: string = s;
	s = "ok\n";
	return t;
}

main: function integer () = {
	print f();
	print s;

	return 0;
}

===[good14.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
0`0`
Expected return code:
0
Actual output:
0`0`
Actual return code:
0
Test Passed!
===[good15.bminor Input]===
// https://piazza.com/class/jziupd2lzpm7cy?cid=179

strdup: function string (s: string);

main: function integer () = {
	a: string = "sssss";
	b: string = strdup(a);
	if (a==b) return 22; else return 11;
}

===[good15.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
11
Actual output:

Actual return code:
11
Test Passed!
===[good16.bminor Input]===
// https://piazza.com/class/jziupd2lzpm7cy?cid=176

f: function void ( x: string ) = 
{
	print x;
}

main: function integer() =
{
	s: string = "hello";
	f(s);
	return 0;
}

===[good16.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
hello
Expected return code:
0
Actual output:
hello
Actual return code:
0
Test Passed!
===[good17.bminor Input]===
a1: integer;
a2: integer = 111;
a3: boolean = false;

A: function integer() = {
	if (a3) return a1 * a2;
	a2: integer = 3;
	if (!!!a3) return a1 + a2;
	return 0;
}

main: function integer() = { return A(); }

===[good17.bminor Compiler Output]===
Assembly code could not be generated:
std_out:
parse error: syntax error
Parse error: parse failed

std_err:

Return code:
1
TEST NOT PASSED
===[good18.bminor Input]===
b1: integer = 3;
b2: integer = 6;
b3: integer = 9;

B: function integer(b3: integer, b4: integer) = {
	print b1 * b2 + b3 % b4;
	print '\n';
	b3 = 37;
	return b3;
}

main: function integer () = {
	print B(5, 3);
	return b3;
}

===[good18.bminor Compiler Output]===
Assembly code could not be generated:
std_out:

std_err:

Return code:
-11
TEST NOT PASSED
===[good2.bminor Input]===
X: array [4] integer = {11, 30, 22, 0};

main: function integer () = {
	i: integer;
	for (i = 0; X[i] != 0; i++)
		print X[i], ' ', X[i] % 3, '\n';

	return 0;
}

===[good2.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
11 2
30 0
22 1

Expected return code:
0
Actual output:
11 2
30 0
22 1

Actual return code:
0
Test Passed!
===[good20.bminor Input]===
D: function integer() = {
	d1: integer = 5;
	d2: integer = d1 + 1; //6
	{
		d3: integer = 9;
		d2: integer = d3 + d1 - 3; //11
		d4: integer = -1;
		d2 = d2 + d3; //20
		print d2 - d4, "\n";
	}
	d4: integer = 16;
	print d2 - d4, '\n';
	{
		d4: integer = -2;
		d3: integer = 1000;
		print d3 + 10;
		print "\n";
		print d4;
		print '\n';
	}
	print d4;
	return 3;
}

main: function integer () = {
	return D();
}

===[good20.bminor Compiler Output]===
Assembly code could not be generated:
std_out:

std_err:

Return code:
-11
TEST NOT PASSED
===[good4.bminor Input]===
collatz: function integer(n: integer, acc: integer) = {
	print n, '\n';
	if (n == 1) return acc;

	if (n % 2 == 0) return collatz(n/2, acc + 1);
	else return collatz(3*n + 1, acc + 1);
}

main:function integer ()=
{
	return collatz(27, 0);
}

===[good4.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
27
82
41
124
62
31
94
47
142
71
214
107
322
161
484
242
121
364
182
91
274
137
412
206
103
310
155
466
233
700
350
175
526
263
790
395
1186
593
1780
890
445
1336
668
334
167
502
251
754
377
1132
566
283
850
425
1276
638
319
958
479
1438
719
2158
1079
3238
1619
4858
2429
7288
3644
1822
911
2734
1367
4102
2051
6154
3077
9232
4616
2308
1154
577
1732
866
433
1300
650
325
976
488
244
122
61
184
92
46
23
70
35
106
53
160
80
40
20
10
5
16
8
4
2
1

Expected return code:
111
Actual output:
27
82
41
124
62
31
94
47
142
71
214
107
322
161
484
242
121
364
182
91
274
137
412
206
103
310
155
466
233
700
350
175
526
263
790
395
1186
593
1780
890
445
1336
668
334
167
502
251
754
377
1132
566
283
850
425
1276
638
319
958
479
1438
719
2158
1079
3238
1619
4858
2429
7288
3644
1822
911
2734
1367
4102
2051
6154
3077
9232
4616
2308
1154
577
1732
866
433
1300
650
325
976
488
244
122
61
184
92
46
23
70
35
106
53
160
80
40
20
10
5
16
8
4
2
1

Actual return code:
111
Test Passed!
===[good5.bminor Input]===
A: function boolean(x: integer, y: integer);
B: function integer(x: char);
C: function char(a: string);

main: function integer() = {
	if (A(B('d') - 1, 10)) {
		x: integer = 3;
		return 2 * B('!') + x;
	}
	return B(C("hello")) % 3;
}

A: function boolean(x: integer, y: integer) = {
	return x == y;
}

B: function integer(c: char) = {
	if (c == '!')
		return 10;
	else {return 11;}
}

C: function char(a: string) = {
	return '!';
}

===[good5.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
23
Actual output:

Actual return code:
23
Test Passed!
===[good7.bminor Input]===
f: function void (i: integer) = {
	N: integer;
	for (N = 0; i > 0; i--) {
		print N;
		N = N + 1;
	}
}

main:function integer () = {
	N: integer = 6;
	for (;;N--) {
		f(N);
		print '\n';
		if (N == 0) return 0;
	}

	return 1;
}

===[good7.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
012345
01234
0123
012
01
0


Expected return code:
0
Actual output:
012345
01234
0123
012
01
0


Actual return code:
0
Test Passed!
===[good8.bminor Input]===
abs: function integer(n: integer);

digits: array [6] integer = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: integer = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}

===[good8.bminor Compiler Output]===
Assembly code could not be generated:
std_out:

std_err:

Return code:
-11
TEST NOT PASSED
===[good9.bminor Input]===
a: array[4] integer;
main: function integer() = {
	a[2] = 60;
	return a[2] + a[2] / 20 * 3 - a[1];
}

===[good9.bminor Compiler Output]===
Successfully generated code
TEST NOT PASSED
Assembly code did not compile to executable
===[good10.bminor Input]===
w: string = "no";

f: function void (s: string) = {
	{
		w: string = "ok";
		print w, "\n";
		w = "bad!\n";
	}
	print s, ' ', w;
	print " ";
	s = "changed\n";
	print s;
}

main:function integer ()= {
	s: string = "good";
	f(s);
	print s;

	return 0;
}

===[good10.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
ok
good no changed
good
Expected return code:
0
Actual output:
ok
good no changed
good
Actual return code:
0
Test Passed!
===[good3.bminor Input]===
T: array [8] integer = {2, 1, 1, 2, 1, 2, 0, 3};

main:function integer ()=
{
	i: integer = 0;
        for (;;) {
		if (T[i] == 0) return T[5] + 10;
		else if (T[i] == 1) i++;
		else if (T[i] == 2) T[i++]--;
		else return 1;
	}

	return 0;
}

===[good3.bminor Compiler Output]===
Assembly code could not be generated:
std_out:
parse error: syntax error
Parse error: parse failed

std_err:

Return code:
1
TEST NOT PASSED
===[good6.bminor Input]===
f: function boolean(b: boolean) = {
	return !b;
}

x: integer = 4;

main:function integer ()=
{
	y: integer = 10;
	if (f(f(f(f(f(x <= y)))))) return 1;
	else if (x < y - x*y) {
		return 4;
	} else return 2;
}

===[good6.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
1
Actual output:

Actual return code:
1
Test Passed!
===[good19.bminor Input]===
c1: integer = 1;
c3: integer = 100;

C: function integer(c1: integer, c2: integer) = {
	c3: integer = 11;
	c4: integer = 12;
	c5: integer = 13;
	return c1 + c2 + c3 + c4;
}

main: function integer() = {
	return C(1, 2);
}

===[good19.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
26
Actual output:

Actual return code:
26
Test Passed!
===== SUMMARIZED RESULTS =====
{
  "hidden_tests": {
    "correct": 14,
    "incorrect": 6
  },
  "student_tests": {
    "correct": 20,
    "incorrect": 0
  }
}
